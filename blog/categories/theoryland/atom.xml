<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TheoryLand | Trevor Oakes]]></title>
  <link href="http://hacklash.github.com/blog/categories/theoryland/atom.xml" rel="self"/>
  <link href="http://hacklash.github.com/"/>
  <updated>2012-06-01T10:46:37-06:00</updated>
  <id>http://hacklash.github.com/</id>
  <author>
    <name><![CDATA[Trevor Oakes]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[P=NP: A Timey Wimey Conversation]]></title>
    <link href="http://hacklash.github.com/blog/2011/10/19/p-equals-np-a-timey-wimey-conversation/"/>
    <updated>2011-10-19T20:33:00-06:00</updated>
    <id>http://hacklash.github.com/blog/2011/10/19/p-equals-np-a-timey-wimey-conversation</id>
    <content type="html"><![CDATA[<p>If you are baffled by the discussion about P=NP and what it all means, that's ok.
I was too. Luckily for you and <em>past me</em> this post can communicate with both of you
through time and space.</p>

<!-- more -->


<p>Let's get cracking then. Computer scientists do not know whether P = NP or P != NP.</p>

<p><em>Hold on a second, isn't that trivial? Isn't that the same thing as finding out
whether N = 1 or not, or maybe if P = 0 or not? Wait, what do N and P stand for
anyways?</em></p>

<p>That last one is a really good question. N and P aren't variables, so you can't
solve for them algebraically like you tried to do there. They are actually
abbreviations for different groups of problems. So N stands for nondeterministic
and P for polynomial.</p>

<p><em>Ok, so you're saying that there are two groups of problems, polynomial and
nondete... whatever polynomial problems and that computer scientists don't know
if these groups of problems are the same or not? This still sounds easy.
If there are different categories aren't they by definition not the same?</em></p>

<p>Hmmm .... I guess it might be important to explain the basics of time complexity.
Time comple-</p>

<p><em>Time complexity? Like how time travel stories get really complex and stop making
sense if you think about them too much?</em></p>

<p>Heh, not quite, but speaking of time travel stories have you seen Primer?</p>

<p><em>No</em></p>

<p>You've at least read Heinlein's <a href="http://pot.home.xs4all.nl/scifi/byhisbootstraps.pdf">By His Bootstraps</a>?</p>

<p><em>No. You know I haven't.</em></p>

<p>Oh, right.</p>

<p><em>Look you're the one who contacted me. Let's get on with this if you insist.</em></p>

<p>Alright. Time complexity means that some problems can be solved faster than others.
<em>Sure.</em> The problems that can be solved quickly are also part of the set of problems
that take longer to solve because you could take longer to solve the problem if you
wanted to. To get more concrete, problems in P can be solved in polynomial time
on a deterministic computer, and problems in NP can be solved in polynomial time
on a nondeterministic computer.</p>

<p><em>Hold on. You keep mentioning "determinism" but I have no clue what that is supposed to mean.</em></p>

<p>Hmmm ...</p>

<p>Well first of all determinism is best explained with its fraternal twin nondeterminism. As you know, an algorithm is a series of steps that when followed produce a consistent result. <em>I guess I do now.</em> Ok, well imagine that there is a choice in those series of steps, like a fork in the road, but only one path leads to your desired result. A deterministic computer would pick one of the paths somehow and try that path. Eventually it might run into a dead end and decide that it should have taken the other path and will come back and try that one.</p>

<p>Now this is where things get a little weird, a nondeterministic computer works almost the same except that it has a perfect, temporarry cloning machine. When it gets to a fork in the road it doesn't even make a choice it makes a perfect copy of itself, including another cloning machine and one copy goes down one path and the other down the second. When one of the copies finds the answer he shoots a flare into the air (letting the computer's operator know that it has an answer) and all the other copies disappear.</p>

<p>Now you could imagine that with all those free copies you do a lot more work in the same amount of time. There's only one problem though, as you might have guessed we have no really good ideas for creating this magical cloning device. The only nondeterministic
computer exists in Theory Land, a magical place Computer Scientists like to pretend
exists. <em>Why?</em> ... Because it lets them focus on the essential parts and not all the
tricky implementation details when coming up with new ideas. Unfortunately for us,
our friend the nondeterministic computer doesn't seem likely to leave Theory Land
anytime soon.</p>

<p><em>Then why talk about it?</em></p>

<p>Well, NP problems can be solved on a deterministic computer, which we do
have in the real world. This just takes much longer than to solve problems from P. A deterministic computer has to do all the work himself, take all the paths until he gets an answer.
In fact as soon as your problem is bigger than a toy example, the time to solve the
problem grows so quickly that solving it is impractical.</p>

<p><em>Is there any way for a computer to solve large versions of those problems?</em></p>

<p>Well, if you don't have to get the 100% accurate solution there are often ways to
get slightly imprecise answers much quicker than it would take to find the perfect solution.
The point is that finding the exact solution very quickly becomes impractical.
If P=NP though, we have proven that there is an easy way to solve all these problems.</p>

<p><em>Isn't that a good thing though?</em></p>

<p>For some things, absolutely! For instance we could improve shipping and infrustructure
efficiency if we could solve the <a href="http://en.wikipedia.org/wiki/Travelling_salesman_problem">travelling salseman problem</a>. There would be some
problems though. We rely on the fact that some problems are hard in order to keep
your credit card number and other sensitive data safe when you send it over the
internet.</p>

<p><em>Come on, how often do I do that?</em></p>

<p>Ok, imagine a world without Amazon.</p>

<p><em>My book selection! And I'd have to actually get off my butt and go somewhere,
like ... Barnes and Noble I guess. No thanks.</em></p>

<p>I know exactly how you feel. <em>Rolls eyes.</em> A world where encryption
can't be trusted or can be easily broken may be a step backwards.</p>

<p><em>I guess I can see why finding out that P=NP might be important. You would have
to implement some sort of disaster plan in order to prevent an e-commerce collapse.
Speaking of disaster plans do you have Zombie plan yet?</em></p>

<p>Nope, I just kind of made it up as I went along. <em>What!?!</em> Uhh ... nevermind. I don't
have much time left before this connection closes ...</p>

<p><em>And this is what you choose to tell me? Can't you at least throw out some stock
ticker symbols?</em></p>

<p>No, shut up and let me finish one last thing. <em>But ...</em> Shush! I forgot to tell
you how people try to prove P=NP or P!=NP. Proving that a problem in NP is also
P does get you faster solution for that problem, but that just means we mislabeled
the problem in the first place. NP-complete problems are a subset of NP and have been proven equivalent to each other. You can actually translate each of them into any other NP-complete problem
which is cool. <em>Is it?</em> Shush.</p>

<p>NP-complete problems have the property that if you can prove that one NP-complete problem is actually in P then you have proven that all NP-complete problems are in P and actually at the same time, that all NP problems
are also in P.</p>

<p><em>I guess that is kind of cool. But I still don't see why proving either P=NP or
P!=NP is important.</em></p>

<p>Actually it may not be. Some people think it is pretty important, or at least
prestigious and spend many hours trying to prove one of the two theorems. Every few
years someone thinks they have it solved, only to have missed something. <a href="http://en.wikipedia.org/wiki/Moshe_Y._Vardi">Others</a>
feel <a href="http://cacm.acm.org/magazines/2010/11/100641-on-p-np-and-computational-complexity/fulltext">finding out one way or the other may actually not be that important</a>.</p>

<p><em>You really could have picked something more valuable for us both than this.</em></p>

<p>Hey, it'll save you from some confusion, and it is an important theory from Computer
Science, which you are studying.</p>

<p><em>I am?</em></p>

<p>Uhh, I'm almost out of time, so before I go, here's a piece of paper with the
essentials in case you forget. Farewell and good luck!</p>

<h3>The Note</h3>

<blockquote><ul>
<li>P and N are not variables</li>
<li>P and NP are abbreviations for the names of two different classes of problems, (polynomial and nondeterministic polynomial)</li>
<li>P is a subset of NP. Problems in P are also in NP but as far as we know not vice versa.</li>
<li>Problems in P likely have practical solutions while problems in NP have no practical exact solutions.</li>
<li>If P=NP all problems that a computer can solve have a fairly easy solution (whether we curently know that solution yet or not)</li>
<li>This would be good for some things (transportationg and shipping among others) and bad for others (encryption and e-commerce)</li>
<li>NP-complete problems are a subgroup of NP and are all equivalent to each other. They are important because they can can be used to prove whether P=NP or P!=NP. Proving that one NP-complete problem is in P is equivalent to proving all NP problems are in P.</li>
</ul>


<p>AAPL Buy $83 Sell $424</p></blockquote>
]]></content>
  </entry>
  
</feed>
